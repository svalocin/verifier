// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package verifier

import "fmt"

type IntVerifier struct {
}

func (vr IntVerifier) Less(v int, n int, msg string) error {
	return Verify(func() bool { return v < n }, msg)
}

func (vr IntVerifier) LessN(v int, n int, name string) error {
	return vr.Less(v, n, fmt.Sprintf(MessageLess, name, n))
}

func (vr IntVerifier) LessP(v int, n int, msg string) {
	errorToPanic(vr.Less(v, n, msg))
}

func (vr IntVerifier) LessNP(v int, n int, name string) {
	errorToPanic(vr.LessN(v, n, name))
}

func (vr IntVerifier) LessAndEqual(v int, n int, msg string) error {
	return Verify(func() bool { return v <= n }, msg)
}

func (vr IntVerifier) LessAndEqualN(v int, n int, name string) error {
	return vr.LessAndEqual(v, n, fmt.Sprintf(MessageLessAndEqual, name, n))
}

func (vr IntVerifier) LessAndEqualP(v int, n int, msg string) {
	errorToPanic(vr.LessAndEqual(v, n, msg))
}

func (vr IntVerifier) LessAndEqualNP(v int, n int, name string) {
	errorToPanic(vr.LessAndEqualN(v, n, name))
}

func (vr IntVerifier) Greater(v int, n int, msg string) error {
	return Verify(func() bool { return v > n }, msg)
}

func (vr IntVerifier) GreaterN(v int, n int, name string) error {
	return vr.Greater(v, n, fmt.Sprintf(MessageGreater, name, n))
}

func (vr IntVerifier) GreaterP(v int, n int, msg string) {
	errorToPanic(vr.Greater(v, n, msg))
}

func (vr IntVerifier) GreaterNP(v int, n int, name string) {
	errorToPanic(vr.GreaterN(v, n, name))
}

func (vr IntVerifier) GreaterAndEqual(v int, n int, msg string) error {
	return Verify(func() bool { return v >= n }, msg)
}

func (vr IntVerifier) GreaterAndEqualN(v int, n int, name string) error {
	return vr.GreaterAndEqual(v, n, fmt.Sprintf(MessageGreaterAndEqual, name, n))
}

func (vr IntVerifier) GreaterAndEqualP(v int, n int, msg string) {
	errorToPanic(vr.GreaterAndEqual(v, n, msg))
}

func (vr IntVerifier) GreaterAndEqualNP(v int, n int, name string) {
	errorToPanic(vr.GreaterAndEqualN(v, n, name))
}

type Int8Verifier struct {
}

func (vr Int8Verifier) Less(v int8, n int8, msg string) error {
	return Verify(func() bool { return v < n }, msg)
}

func (vr Int8Verifier) LessN(v int8, n int8, name string) error {
	return vr.Less(v, n, fmt.Sprintf(MessageLess, name, n))
}

func (vr Int8Verifier) LessP(v int8, n int8, msg string) {
	errorToPanic(vr.Less(v, n, msg))
}

func (vr Int8Verifier) LessNP(v int8, n int8, name string) {
	errorToPanic(vr.LessN(v, n, name))
}

func (vr Int8Verifier) LessAndEqual(v int8, n int8, msg string) error {
	return Verify(func() bool { return v <= n }, msg)
}

func (vr Int8Verifier) LessAndEqualN(v int8, n int8, name string) error {
	return vr.LessAndEqual(v, n, fmt.Sprintf(MessageLessAndEqual, name, n))
}

func (vr Int8Verifier) LessAndEqualP(v int8, n int8, msg string) {
	errorToPanic(vr.LessAndEqual(v, n, msg))
}

func (vr Int8Verifier) LessAndEqualNP(v int8, n int8, name string) {
	errorToPanic(vr.LessAndEqualN(v, n, name))
}

func (vr Int8Verifier) Greater(v int8, n int8, msg string) error {
	return Verify(func() bool { return v > n }, msg)
}

func (vr Int8Verifier) GreaterN(v int8, n int8, name string) error {
	return vr.Greater(v, n, fmt.Sprintf(MessageGreater, name, n))
}

func (vr Int8Verifier) GreaterP(v int8, n int8, msg string) {
	errorToPanic(vr.Greater(v, n, msg))
}

func (vr Int8Verifier) GreaterNP(v int8, n int8, name string) {
	errorToPanic(vr.GreaterN(v, n, name))
}

func (vr Int8Verifier) GreaterAndEqual(v int8, n int8, msg string) error {
	return Verify(func() bool { return v >= n }, msg)
}

func (vr Int8Verifier) GreaterAndEqualN(v int8, n int8, name string) error {
	return vr.GreaterAndEqual(v, n, fmt.Sprintf(MessageGreaterAndEqual, name, n))
}

func (vr Int8Verifier) GreaterAndEqualP(v int8, n int8, msg string) {
	errorToPanic(vr.GreaterAndEqual(v, n, msg))
}

func (vr Int8Verifier) GreaterAndEqualNP(v int8, n int8, name string) {
	errorToPanic(vr.GreaterAndEqualN(v, n, name))
}

type Int16Verifier struct {
}

func (vr Int16Verifier) Less(v int16, n int16, msg string) error {
	return Verify(func() bool { return v < n }, msg)
}

func (vr Int16Verifier) LessN(v int16, n int16, name string) error {
	return vr.Less(v, n, fmt.Sprintf(MessageLess, name, n))
}

func (vr Int16Verifier) LessP(v int16, n int16, msg string) {
	errorToPanic(vr.Less(v, n, msg))
}

func (vr Int16Verifier) LessNP(v int16, n int16, name string) {
	errorToPanic(vr.LessN(v, n, name))
}

func (vr Int16Verifier) LessAndEqual(v int16, n int16, msg string) error {
	return Verify(func() bool { return v <= n }, msg)
}

func (vr Int16Verifier) LessAndEqualN(v int16, n int16, name string) error {
	return vr.LessAndEqual(v, n, fmt.Sprintf(MessageLessAndEqual, name, n))
}

func (vr Int16Verifier) LessAndEqualP(v int16, n int16, msg string) {
	errorToPanic(vr.LessAndEqual(v, n, msg))
}

func (vr Int16Verifier) LessAndEqualNP(v int16, n int16, name string) {
	errorToPanic(vr.LessAndEqualN(v, n, name))
}

func (vr Int16Verifier) Greater(v int16, n int16, msg string) error {
	return Verify(func() bool { return v > n }, msg)
}

func (vr Int16Verifier) GreaterN(v int16, n int16, name string) error {
	return vr.Greater(v, n, fmt.Sprintf(MessageGreater, name, n))
}

func (vr Int16Verifier) GreaterP(v int16, n int16, msg string) {
	errorToPanic(vr.Greater(v, n, msg))
}

func (vr Int16Verifier) GreaterNP(v int16, n int16, name string) {
	errorToPanic(vr.GreaterN(v, n, name))
}

func (vr Int16Verifier) GreaterAndEqual(v int16, n int16, msg string) error {
	return Verify(func() bool { return v >= n }, msg)
}

func (vr Int16Verifier) GreaterAndEqualN(v int16, n int16, name string) error {
	return vr.GreaterAndEqual(v, n, fmt.Sprintf(MessageGreaterAndEqual, name, n))
}

func (vr Int16Verifier) GreaterAndEqualP(v int16, n int16, msg string) {
	errorToPanic(vr.GreaterAndEqual(v, n, msg))
}

func (vr Int16Verifier) GreaterAndEqualNP(v int16, n int16, name string) {
	errorToPanic(vr.GreaterAndEqualN(v, n, name))
}

type Int32Verifier struct {
}

func (vr Int32Verifier) Less(v int32, n int32, msg string) error {
	return Verify(func() bool { return v < n }, msg)
}

func (vr Int32Verifier) LessN(v int32, n int32, name string) error {
	return vr.Less(v, n, fmt.Sprintf(MessageLess, name, n))
}

func (vr Int32Verifier) LessP(v int32, n int32, msg string) {
	errorToPanic(vr.Less(v, n, msg))
}

func (vr Int32Verifier) LessNP(v int32, n int32, name string) {
	errorToPanic(vr.LessN(v, n, name))
}

func (vr Int32Verifier) LessAndEqual(v int32, n int32, msg string) error {
	return Verify(func() bool { return v <= n }, msg)
}

func (vr Int32Verifier) LessAndEqualN(v int32, n int32, name string) error {
	return vr.LessAndEqual(v, n, fmt.Sprintf(MessageLessAndEqual, name, n))
}

func (vr Int32Verifier) LessAndEqualP(v int32, n int32, msg string) {
	errorToPanic(vr.LessAndEqual(v, n, msg))
}

func (vr Int32Verifier) LessAndEqualNP(v int32, n int32, name string) {
	errorToPanic(vr.LessAndEqualN(v, n, name))
}

func (vr Int32Verifier) Greater(v int32, n int32, msg string) error {
	return Verify(func() bool { return v > n }, msg)
}

func (vr Int32Verifier) GreaterN(v int32, n int32, name string) error {
	return vr.Greater(v, n, fmt.Sprintf(MessageGreater, name, n))
}

func (vr Int32Verifier) GreaterP(v int32, n int32, msg string) {
	errorToPanic(vr.Greater(v, n, msg))
}

func (vr Int32Verifier) GreaterNP(v int32, n int32, name string) {
	errorToPanic(vr.GreaterN(v, n, name))
}

func (vr Int32Verifier) GreaterAndEqual(v int32, n int32, msg string) error {
	return Verify(func() bool { return v >= n }, msg)
}

func (vr Int32Verifier) GreaterAndEqualN(v int32, n int32, name string) error {
	return vr.GreaterAndEqual(v, n, fmt.Sprintf(MessageGreaterAndEqual, name, n))
}

func (vr Int32Verifier) GreaterAndEqualP(v int32, n int32, msg string) {
	errorToPanic(vr.GreaterAndEqual(v, n, msg))
}

func (vr Int32Verifier) GreaterAndEqualNP(v int32, n int32, name string) {
	errorToPanic(vr.GreaterAndEqualN(v, n, name))
}

type Int64Verifier struct {
}

func (vr Int64Verifier) Less(v int64, n int64, msg string) error {
	return Verify(func() bool { return v < n }, msg)
}

func (vr Int64Verifier) LessN(v int64, n int64, name string) error {
	return vr.Less(v, n, fmt.Sprintf(MessageLess, name, n))
}

func (vr Int64Verifier) LessP(v int64, n int64, msg string) {
	errorToPanic(vr.Less(v, n, msg))
}

func (vr Int64Verifier) LessNP(v int64, n int64, name string) {
	errorToPanic(vr.LessN(v, n, name))
}

func (vr Int64Verifier) LessAndEqual(v int64, n int64, msg string) error {
	return Verify(func() bool { return v <= n }, msg)
}

func (vr Int64Verifier) LessAndEqualN(v int64, n int64, name string) error {
	return vr.LessAndEqual(v, n, fmt.Sprintf(MessageLessAndEqual, name, n))
}

func (vr Int64Verifier) LessAndEqualP(v int64, n int64, msg string) {
	errorToPanic(vr.LessAndEqual(v, n, msg))
}

func (vr Int64Verifier) LessAndEqualNP(v int64, n int64, name string) {
	errorToPanic(vr.LessAndEqualN(v, n, name))
}

func (vr Int64Verifier) Greater(v int64, n int64, msg string) error {
	return Verify(func() bool { return v > n }, msg)
}

func (vr Int64Verifier) GreaterN(v int64, n int64, name string) error {
	return vr.Greater(v, n, fmt.Sprintf(MessageGreater, name, n))
}

func (vr Int64Verifier) GreaterP(v int64, n int64, msg string) {
	errorToPanic(vr.Greater(v, n, msg))
}

func (vr Int64Verifier) GreaterNP(v int64, n int64, name string) {
	errorToPanic(vr.GreaterN(v, n, name))
}

func (vr Int64Verifier) GreaterAndEqual(v int64, n int64, msg string) error {
	return Verify(func() bool { return v >= n }, msg)
}

func (vr Int64Verifier) GreaterAndEqualN(v int64, n int64, name string) error {
	return vr.GreaterAndEqual(v, n, fmt.Sprintf(MessageGreaterAndEqual, name, n))
}

func (vr Int64Verifier) GreaterAndEqualP(v int64, n int64, msg string) {
	errorToPanic(vr.GreaterAndEqual(v, n, msg))
}

func (vr Int64Verifier) GreaterAndEqualNP(v int64, n int64, name string) {
	errorToPanic(vr.GreaterAndEqualN(v, n, name))
}

type UintVerifier struct {
}

func (vr UintVerifier) Less(v uint, n uint, msg string) error {
	return Verify(func() bool { return v < n }, msg)
}

func (vr UintVerifier) LessN(v uint, n uint, name string) error {
	return vr.Less(v, n, fmt.Sprintf(MessageLess, name, n))
}

func (vr UintVerifier) LessP(v uint, n uint, msg string) {
	errorToPanic(vr.Less(v, n, msg))
}

func (vr UintVerifier) LessNP(v uint, n uint, name string) {
	errorToPanic(vr.LessN(v, n, name))
}

func (vr UintVerifier) LessAndEqual(v uint, n uint, msg string) error {
	return Verify(func() bool { return v <= n }, msg)
}

func (vr UintVerifier) LessAndEqualN(v uint, n uint, name string) error {
	return vr.LessAndEqual(v, n, fmt.Sprintf(MessageLessAndEqual, name, n))
}

func (vr UintVerifier) LessAndEqualP(v uint, n uint, msg string) {
	errorToPanic(vr.LessAndEqual(v, n, msg))
}

func (vr UintVerifier) LessAndEqualNP(v uint, n uint, name string) {
	errorToPanic(vr.LessAndEqualN(v, n, name))
}

func (vr UintVerifier) Greater(v uint, n uint, msg string) error {
	return Verify(func() bool { return v > n }, msg)
}

func (vr UintVerifier) GreaterN(v uint, n uint, name string) error {
	return vr.Greater(v, n, fmt.Sprintf(MessageGreater, name, n))
}

func (vr UintVerifier) GreaterP(v uint, n uint, msg string) {
	errorToPanic(vr.Greater(v, n, msg))
}

func (vr UintVerifier) GreaterNP(v uint, n uint, name string) {
	errorToPanic(vr.GreaterN(v, n, name))
}

func (vr UintVerifier) GreaterAndEqual(v uint, n uint, msg string) error {
	return Verify(func() bool { return v >= n }, msg)
}

func (vr UintVerifier) GreaterAndEqualN(v uint, n uint, name string) error {
	return vr.GreaterAndEqual(v, n, fmt.Sprintf(MessageGreaterAndEqual, name, n))
}

func (vr UintVerifier) GreaterAndEqualP(v uint, n uint, msg string) {
	errorToPanic(vr.GreaterAndEqual(v, n, msg))
}

func (vr UintVerifier) GreaterAndEqualNP(v uint, n uint, name string) {
	errorToPanic(vr.GreaterAndEqualN(v, n, name))
}

type Uint8Verifier struct {
}

func (vr Uint8Verifier) Less(v uint8, n uint8, msg string) error {
	return Verify(func() bool { return v < n }, msg)
}

func (vr Uint8Verifier) LessN(v uint8, n uint8, name string) error {
	return vr.Less(v, n, fmt.Sprintf(MessageLess, name, n))
}

func (vr Uint8Verifier) LessP(v uint8, n uint8, msg string) {
	errorToPanic(vr.Less(v, n, msg))
}

func (vr Uint8Verifier) LessNP(v uint8, n uint8, name string) {
	errorToPanic(vr.LessN(v, n, name))
}

func (vr Uint8Verifier) LessAndEqual(v uint8, n uint8, msg string) error {
	return Verify(func() bool { return v <= n }, msg)
}

func (vr Uint8Verifier) LessAndEqualN(v uint8, n uint8, name string) error {
	return vr.LessAndEqual(v, n, fmt.Sprintf(MessageLessAndEqual, name, n))
}

func (vr Uint8Verifier) LessAndEqualP(v uint8, n uint8, msg string) {
	errorToPanic(vr.LessAndEqual(v, n, msg))
}

func (vr Uint8Verifier) LessAndEqualNP(v uint8, n uint8, name string) {
	errorToPanic(vr.LessAndEqualN(v, n, name))
}

func (vr Uint8Verifier) Greater(v uint8, n uint8, msg string) error {
	return Verify(func() bool { return v > n }, msg)
}

func (vr Uint8Verifier) GreaterN(v uint8, n uint8, name string) error {
	return vr.Greater(v, n, fmt.Sprintf(MessageGreater, name, n))
}

func (vr Uint8Verifier) GreaterP(v uint8, n uint8, msg string) {
	errorToPanic(vr.Greater(v, n, msg))
}

func (vr Uint8Verifier) GreaterNP(v uint8, n uint8, name string) {
	errorToPanic(vr.GreaterN(v, n, name))
}

func (vr Uint8Verifier) GreaterAndEqual(v uint8, n uint8, msg string) error {
	return Verify(func() bool { return v >= n }, msg)
}

func (vr Uint8Verifier) GreaterAndEqualN(v uint8, n uint8, name string) error {
	return vr.GreaterAndEqual(v, n, fmt.Sprintf(MessageGreaterAndEqual, name, n))
}

func (vr Uint8Verifier) GreaterAndEqualP(v uint8, n uint8, msg string) {
	errorToPanic(vr.GreaterAndEqual(v, n, msg))
}

func (vr Uint8Verifier) GreaterAndEqualNP(v uint8, n uint8, name string) {
	errorToPanic(vr.GreaterAndEqualN(v, n, name))
}

type Uint16Verifier struct {
}

func (vr Uint16Verifier) Less(v uint16, n uint16, msg string) error {
	return Verify(func() bool { return v < n }, msg)
}

func (vr Uint16Verifier) LessN(v uint16, n uint16, name string) error {
	return vr.Less(v, n, fmt.Sprintf(MessageLess, name, n))
}

func (vr Uint16Verifier) LessP(v uint16, n uint16, msg string) {
	errorToPanic(vr.Less(v, n, msg))
}

func (vr Uint16Verifier) LessNP(v uint16, n uint16, name string) {
	errorToPanic(vr.LessN(v, n, name))
}

func (vr Uint16Verifier) LessAndEqual(v uint16, n uint16, msg string) error {
	return Verify(func() bool { return v <= n }, msg)
}

func (vr Uint16Verifier) LessAndEqualN(v uint16, n uint16, name string) error {
	return vr.LessAndEqual(v, n, fmt.Sprintf(MessageLessAndEqual, name, n))
}

func (vr Uint16Verifier) LessAndEqualP(v uint16, n uint16, msg string) {
	errorToPanic(vr.LessAndEqual(v, n, msg))
}

func (vr Uint16Verifier) LessAndEqualNP(v uint16, n uint16, name string) {
	errorToPanic(vr.LessAndEqualN(v, n, name))
}

func (vr Uint16Verifier) Greater(v uint16, n uint16, msg string) error {
	return Verify(func() bool { return v > n }, msg)
}

func (vr Uint16Verifier) GreaterN(v uint16, n uint16, name string) error {
	return vr.Greater(v, n, fmt.Sprintf(MessageGreater, name, n))
}

func (vr Uint16Verifier) GreaterP(v uint16, n uint16, msg string) {
	errorToPanic(vr.Greater(v, n, msg))
}

func (vr Uint16Verifier) GreaterNP(v uint16, n uint16, name string) {
	errorToPanic(vr.GreaterN(v, n, name))
}

func (vr Uint16Verifier) GreaterAndEqual(v uint16, n uint16, msg string) error {
	return Verify(func() bool { return v >= n }, msg)
}

func (vr Uint16Verifier) GreaterAndEqualN(v uint16, n uint16, name string) error {
	return vr.GreaterAndEqual(v, n, fmt.Sprintf(MessageGreaterAndEqual, name, n))
}

func (vr Uint16Verifier) GreaterAndEqualP(v uint16, n uint16, msg string) {
	errorToPanic(vr.GreaterAndEqual(v, n, msg))
}

func (vr Uint16Verifier) GreaterAndEqualNP(v uint16, n uint16, name string) {
	errorToPanic(vr.GreaterAndEqualN(v, n, name))
}

type Uint32Verifier struct {
}

func (vr Uint32Verifier) Less(v uint32, n uint32, msg string) error {
	return Verify(func() bool { return v < n }, msg)
}

func (vr Uint32Verifier) LessN(v uint32, n uint32, name string) error {
	return vr.Less(v, n, fmt.Sprintf(MessageLess, name, n))
}

func (vr Uint32Verifier) LessP(v uint32, n uint32, msg string) {
	errorToPanic(vr.Less(v, n, msg))
}

func (vr Uint32Verifier) LessNP(v uint32, n uint32, name string) {
	errorToPanic(vr.LessN(v, n, name))
}

func (vr Uint32Verifier) LessAndEqual(v uint32, n uint32, msg string) error {
	return Verify(func() bool { return v <= n }, msg)
}

func (vr Uint32Verifier) LessAndEqualN(v uint32, n uint32, name string) error {
	return vr.LessAndEqual(v, n, fmt.Sprintf(MessageLessAndEqual, name, n))
}

func (vr Uint32Verifier) LessAndEqualP(v uint32, n uint32, msg string) {
	errorToPanic(vr.LessAndEqual(v, n, msg))
}

func (vr Uint32Verifier) LessAndEqualNP(v uint32, n uint32, name string) {
	errorToPanic(vr.LessAndEqualN(v, n, name))
}

func (vr Uint32Verifier) Greater(v uint32, n uint32, msg string) error {
	return Verify(func() bool { return v > n }, msg)
}

func (vr Uint32Verifier) GreaterN(v uint32, n uint32, name string) error {
	return vr.Greater(v, n, fmt.Sprintf(MessageGreater, name, n))
}

func (vr Uint32Verifier) GreaterP(v uint32, n uint32, msg string) {
	errorToPanic(vr.Greater(v, n, msg))
}

func (vr Uint32Verifier) GreaterNP(v uint32, n uint32, name string) {
	errorToPanic(vr.GreaterN(v, n, name))
}

func (vr Uint32Verifier) GreaterAndEqual(v uint32, n uint32, msg string) error {
	return Verify(func() bool { return v >= n }, msg)
}

func (vr Uint32Verifier) GreaterAndEqualN(v uint32, n uint32, name string) error {
	return vr.GreaterAndEqual(v, n, fmt.Sprintf(MessageGreaterAndEqual, name, n))
}

func (vr Uint32Verifier) GreaterAndEqualP(v uint32, n uint32, msg string) {
	errorToPanic(vr.GreaterAndEqual(v, n, msg))
}

func (vr Uint32Verifier) GreaterAndEqualNP(v uint32, n uint32, name string) {
	errorToPanic(vr.GreaterAndEqualN(v, n, name))
}

type Uint64Verifier struct {
}

func (vr Uint64Verifier) Less(v uint64, n uint64, msg string) error {
	return Verify(func() bool { return v < n }, msg)
}

func (vr Uint64Verifier) LessN(v uint64, n uint64, name string) error {
	return vr.Less(v, n, fmt.Sprintf(MessageLess, name, n))
}

func (vr Uint64Verifier) LessP(v uint64, n uint64, msg string) {
	errorToPanic(vr.Less(v, n, msg))
}

func (vr Uint64Verifier) LessNP(v uint64, n uint64, name string) {
	errorToPanic(vr.LessN(v, n, name))
}

func (vr Uint64Verifier) LessAndEqual(v uint64, n uint64, msg string) error {
	return Verify(func() bool { return v <= n }, msg)
}

func (vr Uint64Verifier) LessAndEqualN(v uint64, n uint64, name string) error {
	return vr.LessAndEqual(v, n, fmt.Sprintf(MessageLessAndEqual, name, n))
}

func (vr Uint64Verifier) LessAndEqualP(v uint64, n uint64, msg string) {
	errorToPanic(vr.LessAndEqual(v, n, msg))
}

func (vr Uint64Verifier) LessAndEqualNP(v uint64, n uint64, name string) {
	errorToPanic(vr.LessAndEqualN(v, n, name))
}

func (vr Uint64Verifier) Greater(v uint64, n uint64, msg string) error {
	return Verify(func() bool { return v > n }, msg)
}

func (vr Uint64Verifier) GreaterN(v uint64, n uint64, name string) error {
	return vr.Greater(v, n, fmt.Sprintf(MessageGreater, name, n))
}

func (vr Uint64Verifier) GreaterP(v uint64, n uint64, msg string) {
	errorToPanic(vr.Greater(v, n, msg))
}

func (vr Uint64Verifier) GreaterNP(v uint64, n uint64, name string) {
	errorToPanic(vr.GreaterN(v, n, name))
}

func (vr Uint64Verifier) GreaterAndEqual(v uint64, n uint64, msg string) error {
	return Verify(func() bool { return v >= n }, msg)
}

func (vr Uint64Verifier) GreaterAndEqualN(v uint64, n uint64, name string) error {
	return vr.GreaterAndEqual(v, n, fmt.Sprintf(MessageGreaterAndEqual, name, n))
}

func (vr Uint64Verifier) GreaterAndEqualP(v uint64, n uint64, msg string) {
	errorToPanic(vr.GreaterAndEqual(v, n, msg))
}

func (vr Uint64Verifier) GreaterAndEqualNP(v uint64, n uint64, name string) {
	errorToPanic(vr.GreaterAndEqualN(v, n, name))
}

type Float32Verifier struct {
}

func (vr Float32Verifier) Less(v float32, n float32, msg string) error {
	return Verify(func() bool { return v < n }, msg)
}

func (vr Float32Verifier) LessN(v float32, n float32, name string) error {
	return vr.Less(v, n, fmt.Sprintf(MessageLess, name, n))
}

func (vr Float32Verifier) LessP(v float32, n float32, msg string) {
	errorToPanic(vr.Less(v, n, msg))
}

func (vr Float32Verifier) LessNP(v float32, n float32, name string) {
	errorToPanic(vr.LessN(v, n, name))
}

func (vr Float32Verifier) LessAndEqual(v float32, n float32, msg string) error {
	return Verify(func() bool { return v <= n }, msg)
}

func (vr Float32Verifier) LessAndEqualN(v float32, n float32, name string) error {
	return vr.LessAndEqual(v, n, fmt.Sprintf(MessageLessAndEqual, name, n))
}

func (vr Float32Verifier) LessAndEqualP(v float32, n float32, msg string) {
	errorToPanic(vr.LessAndEqual(v, n, msg))
}

func (vr Float32Verifier) LessAndEqualNP(v float32, n float32, name string) {
	errorToPanic(vr.LessAndEqualN(v, n, name))
}

func (vr Float32Verifier) Greater(v float32, n float32, msg string) error {
	return Verify(func() bool { return v > n }, msg)
}

func (vr Float32Verifier) GreaterN(v float32, n float32, name string) error {
	return vr.Greater(v, n, fmt.Sprintf(MessageGreater, name, n))
}

func (vr Float32Verifier) GreaterP(v float32, n float32, msg string) {
	errorToPanic(vr.Greater(v, n, msg))
}

func (vr Float32Verifier) GreaterNP(v float32, n float32, name string) {
	errorToPanic(vr.GreaterN(v, n, name))
}

func (vr Float32Verifier) GreaterAndEqual(v float32, n float32, msg string) error {
	return Verify(func() bool { return v >= n }, msg)
}

func (vr Float32Verifier) GreaterAndEqualN(v float32, n float32, name string) error {
	return vr.GreaterAndEqual(v, n, fmt.Sprintf(MessageGreaterAndEqual, name, n))
}

func (vr Float32Verifier) GreaterAndEqualP(v float32, n float32, msg string) {
	errorToPanic(vr.GreaterAndEqual(v, n, msg))
}

func (vr Float32Verifier) GreaterAndEqualNP(v float32, n float32, name string) {
	errorToPanic(vr.GreaterAndEqualN(v, n, name))
}

type Float64Verifier struct {
}

func (vr Float64Verifier) Less(v float64, n float64, msg string) error {
	return Verify(func() bool { return v < n }, msg)
}

func (vr Float64Verifier) LessN(v float64, n float64, name string) error {
	return vr.Less(v, n, fmt.Sprintf(MessageLess, name, n))
}

func (vr Float64Verifier) LessP(v float64, n float64, msg string) {
	errorToPanic(vr.Less(v, n, msg))
}

func (vr Float64Verifier) LessNP(v float64, n float64, name string) {
	errorToPanic(vr.LessN(v, n, name))
}

func (vr Float64Verifier) LessAndEqual(v float64, n float64, msg string) error {
	return Verify(func() bool { return v <= n }, msg)
}

func (vr Float64Verifier) LessAndEqualN(v float64, n float64, name string) error {
	return vr.LessAndEqual(v, n, fmt.Sprintf(MessageLessAndEqual, name, n))
}

func (vr Float64Verifier) LessAndEqualP(v float64, n float64, msg string) {
	errorToPanic(vr.LessAndEqual(v, n, msg))
}

func (vr Float64Verifier) LessAndEqualNP(v float64, n float64, name string) {
	errorToPanic(vr.LessAndEqualN(v, n, name))
}

func (vr Float64Verifier) Greater(v float64, n float64, msg string) error {
	return Verify(func() bool { return v > n }, msg)
}

func (vr Float64Verifier) GreaterN(v float64, n float64, name string) error {
	return vr.Greater(v, n, fmt.Sprintf(MessageGreater, name, n))
}

func (vr Float64Verifier) GreaterP(v float64, n float64, msg string) {
	errorToPanic(vr.Greater(v, n, msg))
}

func (vr Float64Verifier) GreaterNP(v float64, n float64, name string) {
	errorToPanic(vr.GreaterN(v, n, name))
}

func (vr Float64Verifier) GreaterAndEqual(v float64, n float64, msg string) error {
	return Verify(func() bool { return v >= n }, msg)
}

func (vr Float64Verifier) GreaterAndEqualN(v float64, n float64, name string) error {
	return vr.GreaterAndEqual(v, n, fmt.Sprintf(MessageGreaterAndEqual, name, n))
}

func (vr Float64Verifier) GreaterAndEqualP(v float64, n float64, msg string) {
	errorToPanic(vr.GreaterAndEqual(v, n, msg))
}

func (vr Float64Verifier) GreaterAndEqualNP(v float64, n float64, name string) {
	errorToPanic(vr.GreaterAndEqualN(v, n, name))
}
